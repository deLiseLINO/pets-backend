// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"pets-backend/internal/ent/otpcodes"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// OtpCodesCreate is the builder for creating a OtpCodes entity.
type OtpCodesCreate struct {
	config
	mutation *OtpCodesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (occ *OtpCodesCreate) SetCode(s string) *OtpCodesCreate {
	occ.mutation.SetCode(s)
	return occ
}

// SetEmail sets the "email" field.
func (occ *OtpCodesCreate) SetEmail(s string) *OtpCodesCreate {
	occ.mutation.SetEmail(s)
	return occ
}

// SetNextSendTime sets the "next_send_time" field.
func (occ *OtpCodesCreate) SetNextSendTime(t time.Time) *OtpCodesCreate {
	occ.mutation.SetNextSendTime(t)
	return occ
}

// SetExparationTime sets the "exparation_time" field.
func (occ *OtpCodesCreate) SetExparationTime(t time.Time) *OtpCodesCreate {
	occ.mutation.SetExparationTime(t)
	return occ
}

// SetID sets the "id" field.
func (occ *OtpCodesCreate) SetID(u uuid.UUID) *OtpCodesCreate {
	occ.mutation.SetID(u)
	return occ
}

// Mutation returns the OtpCodesMutation object of the builder.
func (occ *OtpCodesCreate) Mutation() *OtpCodesMutation {
	return occ.mutation
}

// Save creates the OtpCodes in the database.
func (occ *OtpCodesCreate) Save(ctx context.Context) (*OtpCodes, error) {
	return withHooks(ctx, occ.sqlSave, occ.mutation, occ.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OtpCodesCreate) SaveX(ctx context.Context) *OtpCodes {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occ *OtpCodesCreate) Exec(ctx context.Context) error {
	_, err := occ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occ *OtpCodesCreate) ExecX(ctx context.Context) {
	if err := occ.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (occ *OtpCodesCreate) check() error {
	if _, ok := occ.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "OtpCodes.code"`)}
	}
	if _, ok := occ.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "OtpCodes.email"`)}
	}
	if _, ok := occ.mutation.NextSendTime(); !ok {
		return &ValidationError{Name: "next_send_time", err: errors.New(`ent: missing required field "OtpCodes.next_send_time"`)}
	}
	if _, ok := occ.mutation.ExparationTime(); !ok {
		return &ValidationError{Name: "exparation_time", err: errors.New(`ent: missing required field "OtpCodes.exparation_time"`)}
	}
	return nil
}

func (occ *OtpCodesCreate) sqlSave(ctx context.Context) (*OtpCodes, error) {
	if err := occ.check(); err != nil {
		return nil, err
	}
	_node, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	occ.mutation.id = &_node.ID
	occ.mutation.done = true
	return _node, nil
}

func (occ *OtpCodesCreate) createSpec() (*OtpCodes, *sqlgraph.CreateSpec) {
	var (
		_node = &OtpCodes{config: occ.config}
		_spec = sqlgraph.NewCreateSpec(otpcodes.Table, sqlgraph.NewFieldSpec(otpcodes.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = occ.conflict
	if id, ok := occ.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := occ.mutation.Code(); ok {
		_spec.SetField(otpcodes.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := occ.mutation.Email(); ok {
		_spec.SetField(otpcodes.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := occ.mutation.NextSendTime(); ok {
		_spec.SetField(otpcodes.FieldNextSendTime, field.TypeTime, value)
		_node.NextSendTime = value
	}
	if value, ok := occ.mutation.ExparationTime(); ok {
		_spec.SetField(otpcodes.FieldExparationTime, field.TypeTime, value)
		_node.ExparationTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OtpCodes.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OtpCodesUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (occ *OtpCodesCreate) OnConflict(opts ...sql.ConflictOption) *OtpCodesUpsertOne {
	occ.conflict = opts
	return &OtpCodesUpsertOne{
		create: occ,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OtpCodes.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (occ *OtpCodesCreate) OnConflictColumns(columns ...string) *OtpCodesUpsertOne {
	occ.conflict = append(occ.conflict, sql.ConflictColumns(columns...))
	return &OtpCodesUpsertOne{
		create: occ,
	}
}

type (
	// OtpCodesUpsertOne is the builder for "upsert"-ing
	//  one OtpCodes node.
	OtpCodesUpsertOne struct {
		create *OtpCodesCreate
	}

	// OtpCodesUpsert is the "OnConflict" setter.
	OtpCodesUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *OtpCodesUpsert) SetCode(v string) *OtpCodesUpsert {
	u.Set(otpcodes.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OtpCodesUpsert) UpdateCode() *OtpCodesUpsert {
	u.SetExcluded(otpcodes.FieldCode)
	return u
}

// SetEmail sets the "email" field.
func (u *OtpCodesUpsert) SetEmail(v string) *OtpCodesUpsert {
	u.Set(otpcodes.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OtpCodesUpsert) UpdateEmail() *OtpCodesUpsert {
	u.SetExcluded(otpcodes.FieldEmail)
	return u
}

// SetNextSendTime sets the "next_send_time" field.
func (u *OtpCodesUpsert) SetNextSendTime(v time.Time) *OtpCodesUpsert {
	u.Set(otpcodes.FieldNextSendTime, v)
	return u
}

// UpdateNextSendTime sets the "next_send_time" field to the value that was provided on create.
func (u *OtpCodesUpsert) UpdateNextSendTime() *OtpCodesUpsert {
	u.SetExcluded(otpcodes.FieldNextSendTime)
	return u
}

// SetExparationTime sets the "exparation_time" field.
func (u *OtpCodesUpsert) SetExparationTime(v time.Time) *OtpCodesUpsert {
	u.Set(otpcodes.FieldExparationTime, v)
	return u
}

// UpdateExparationTime sets the "exparation_time" field to the value that was provided on create.
func (u *OtpCodesUpsert) UpdateExparationTime() *OtpCodesUpsert {
	u.SetExcluded(otpcodes.FieldExparationTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OtpCodes.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(otpcodes.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OtpCodesUpsertOne) UpdateNewValues() *OtpCodesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(otpcodes.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OtpCodes.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OtpCodesUpsertOne) Ignore() *OtpCodesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OtpCodesUpsertOne) DoNothing() *OtpCodesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OtpCodesCreate.OnConflict
// documentation for more info.
func (u *OtpCodesUpsertOne) Update(set func(*OtpCodesUpsert)) *OtpCodesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OtpCodesUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *OtpCodesUpsertOne) SetCode(v string) *OtpCodesUpsertOne {
	return u.Update(func(s *OtpCodesUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OtpCodesUpsertOne) UpdateCode() *OtpCodesUpsertOne {
	return u.Update(func(s *OtpCodesUpsert) {
		s.UpdateCode()
	})
}

// SetEmail sets the "email" field.
func (u *OtpCodesUpsertOne) SetEmail(v string) *OtpCodesUpsertOne {
	return u.Update(func(s *OtpCodesUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OtpCodesUpsertOne) UpdateEmail() *OtpCodesUpsertOne {
	return u.Update(func(s *OtpCodesUpsert) {
		s.UpdateEmail()
	})
}

// SetNextSendTime sets the "next_send_time" field.
func (u *OtpCodesUpsertOne) SetNextSendTime(v time.Time) *OtpCodesUpsertOne {
	return u.Update(func(s *OtpCodesUpsert) {
		s.SetNextSendTime(v)
	})
}

// UpdateNextSendTime sets the "next_send_time" field to the value that was provided on create.
func (u *OtpCodesUpsertOne) UpdateNextSendTime() *OtpCodesUpsertOne {
	return u.Update(func(s *OtpCodesUpsert) {
		s.UpdateNextSendTime()
	})
}

// SetExparationTime sets the "exparation_time" field.
func (u *OtpCodesUpsertOne) SetExparationTime(v time.Time) *OtpCodesUpsertOne {
	return u.Update(func(s *OtpCodesUpsert) {
		s.SetExparationTime(v)
	})
}

// UpdateExparationTime sets the "exparation_time" field to the value that was provided on create.
func (u *OtpCodesUpsertOne) UpdateExparationTime() *OtpCodesUpsertOne {
	return u.Update(func(s *OtpCodesUpsert) {
		s.UpdateExparationTime()
	})
}

// Exec executes the query.
func (u *OtpCodesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OtpCodesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OtpCodesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OtpCodesUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OtpCodesUpsertOne.ID is not supported by MySQL driver. Use OtpCodesUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OtpCodesUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OtpCodesCreateBulk is the builder for creating many OtpCodes entities in bulk.
type OtpCodesCreateBulk struct {
	config
	err      error
	builders []*OtpCodesCreate
	conflict []sql.ConflictOption
}

// Save creates the OtpCodes entities in the database.
func (occb *OtpCodesCreateBulk) Save(ctx context.Context) ([]*OtpCodes, error) {
	if occb.err != nil {
		return nil, occb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OtpCodes, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OtpCodesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = occb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (occb *OtpCodesCreateBulk) SaveX(ctx context.Context) []*OtpCodes {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occb *OtpCodesCreateBulk) Exec(ctx context.Context) error {
	_, err := occb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occb *OtpCodesCreateBulk) ExecX(ctx context.Context) {
	if err := occb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OtpCodes.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OtpCodesUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (occb *OtpCodesCreateBulk) OnConflict(opts ...sql.ConflictOption) *OtpCodesUpsertBulk {
	occb.conflict = opts
	return &OtpCodesUpsertBulk{
		create: occb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OtpCodes.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (occb *OtpCodesCreateBulk) OnConflictColumns(columns ...string) *OtpCodesUpsertBulk {
	occb.conflict = append(occb.conflict, sql.ConflictColumns(columns...))
	return &OtpCodesUpsertBulk{
		create: occb,
	}
}

// OtpCodesUpsertBulk is the builder for "upsert"-ing
// a bulk of OtpCodes nodes.
type OtpCodesUpsertBulk struct {
	create *OtpCodesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OtpCodes.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(otpcodes.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OtpCodesUpsertBulk) UpdateNewValues() *OtpCodesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(otpcodes.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OtpCodes.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OtpCodesUpsertBulk) Ignore() *OtpCodesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OtpCodesUpsertBulk) DoNothing() *OtpCodesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OtpCodesCreateBulk.OnConflict
// documentation for more info.
func (u *OtpCodesUpsertBulk) Update(set func(*OtpCodesUpsert)) *OtpCodesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OtpCodesUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *OtpCodesUpsertBulk) SetCode(v string) *OtpCodesUpsertBulk {
	return u.Update(func(s *OtpCodesUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OtpCodesUpsertBulk) UpdateCode() *OtpCodesUpsertBulk {
	return u.Update(func(s *OtpCodesUpsert) {
		s.UpdateCode()
	})
}

// SetEmail sets the "email" field.
func (u *OtpCodesUpsertBulk) SetEmail(v string) *OtpCodesUpsertBulk {
	return u.Update(func(s *OtpCodesUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OtpCodesUpsertBulk) UpdateEmail() *OtpCodesUpsertBulk {
	return u.Update(func(s *OtpCodesUpsert) {
		s.UpdateEmail()
	})
}

// SetNextSendTime sets the "next_send_time" field.
func (u *OtpCodesUpsertBulk) SetNextSendTime(v time.Time) *OtpCodesUpsertBulk {
	return u.Update(func(s *OtpCodesUpsert) {
		s.SetNextSendTime(v)
	})
}

// UpdateNextSendTime sets the "next_send_time" field to the value that was provided on create.
func (u *OtpCodesUpsertBulk) UpdateNextSendTime() *OtpCodesUpsertBulk {
	return u.Update(func(s *OtpCodesUpsert) {
		s.UpdateNextSendTime()
	})
}

// SetExparationTime sets the "exparation_time" field.
func (u *OtpCodesUpsertBulk) SetExparationTime(v time.Time) *OtpCodesUpsertBulk {
	return u.Update(func(s *OtpCodesUpsert) {
		s.SetExparationTime(v)
	})
}

// UpdateExparationTime sets the "exparation_time" field to the value that was provided on create.
func (u *OtpCodesUpsertBulk) UpdateExparationTime() *OtpCodesUpsertBulk {
	return u.Update(func(s *OtpCodesUpsert) {
		s.UpdateExparationTime()
	})
}

// Exec executes the query.
func (u *OtpCodesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OtpCodesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OtpCodesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OtpCodesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
