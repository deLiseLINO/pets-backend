// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"pets-backend/internal/ent/otpcodes"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// OtpCodes is the model entity for the OtpCodes schema.
type OtpCodes struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// NextSendTime holds the value of the "next_send_time" field.
	NextSendTime time.Time `json:"next_send_time,omitempty"`
	// ExparationTime holds the value of the "exparation_time" field.
	ExparationTime time.Time `json:"exparation_time,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OtpCodes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case otpcodes.FieldCode, otpcodes.FieldEmail:
			values[i] = new(sql.NullString)
		case otpcodes.FieldNextSendTime, otpcodes.FieldExparationTime:
			values[i] = new(sql.NullTime)
		case otpcodes.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OtpCodes fields.
func (oc *OtpCodes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case otpcodes.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				oc.ID = *value
			}
		case otpcodes.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				oc.Code = value.String
			}
		case otpcodes.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				oc.Email = value.String
			}
		case otpcodes.FieldNextSendTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_send_time", values[i])
			} else if value.Valid {
				oc.NextSendTime = value.Time
			}
		case otpcodes.FieldExparationTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field exparation_time", values[i])
			} else if value.Valid {
				oc.ExparationTime = value.Time
			}
		default:
			oc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OtpCodes.
// This includes values selected through modifiers, order, etc.
func (oc *OtpCodes) Value(name string) (ent.Value, error) {
	return oc.selectValues.Get(name)
}

// Update returns a builder for updating this OtpCodes.
// Note that you need to call OtpCodes.Unwrap() before calling this method if this OtpCodes
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OtpCodes) Update() *OtpCodesUpdateOne {
	return NewOtpCodesClient(oc.config).UpdateOne(oc)
}

// Unwrap unwraps the OtpCodes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OtpCodes) Unwrap() *OtpCodes {
	_tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OtpCodes is not a transactional entity")
	}
	oc.config.driver = _tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OtpCodes) String() string {
	var builder strings.Builder
	builder.WriteString("OtpCodes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oc.ID))
	builder.WriteString("code=")
	builder.WriteString(oc.Code)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(oc.Email)
	builder.WriteString(", ")
	builder.WriteString("next_send_time=")
	builder.WriteString(oc.NextSendTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("exparation_time=")
	builder.WriteString(oc.ExparationTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OtpCodesSlice is a parsable slice of OtpCodes.
type OtpCodesSlice []*OtpCodes
